---
pagination:
  data: questions
  size: 1
  alias: question
  addAllPagesToCollections: true
permalink: "questions/question-{{ pagination.pageNumber + 1 }}/"
tags: questions
eleventyComputed:
  title: "{{ question.title }}"
layout: layout.html
---

<div class="question-container">
  <h2 class="question-title">{{ question.title }}</h2>
  <div class="options-container">
    <p>Options:</p>
    <ul class="options-list">
      {% for option in question.options %}
        <li>
          <label>
            <input type="radio" name="answer" value="{{ option }}">
            {{ option }}
          </label>
        </li>
      {% endfor %}
    </ul>
  </div>
  <div class="button-container">
    <button type="button" id="checkButton" class="btn">Check</button>
    <button type="button" id="nextButton" class="btn" style="display: none;">Next Question</button>
  </div>
  <p class="feedback" id="feedback"></p>
</div>


<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Questions URLs
    const questionUrls = {{ questions | jsonify | safe }};
    const currentUrl = "{{ question.url }}";

    // Add event listeners to buttons
    const checkButton = document.getElementById("checkButton");
    if (checkButton) {
      checkButton.addEventListener("click", checkAnswer);
    }

    const nextButton = document.getElementById("nextButton");
    if (nextButton) {
      nextButton.addEventListener("click", goToNextQuestion);
    }

    function checkAnswer() {
      console.log("checkAnswer function called");

      const selectedOption = document.querySelector('input[name="answer"]:checked');
      const feedback = document.getElementById("feedback");

      feedback.innerHTML = '';
      feedback.className = 'feedback';
      document.querySelectorAll('.options-list li').forEach(li => li.classList.remove('correct-answer', 'incorrect-answer'));

      if (!selectedOption) {
        feedback.innerHTML = "Please select an answer.";
        feedback.classList.add('error');
        return;
      }

      const correctAnswer = "{{ question.correctAnswer }}".trim().toUpperCase();
      const selectedAnswer = selectedOption.value.trim().toUpperCase();

      console.log("Correct Answer:", correctAnswer);
      console.log("Selected Answer:", selectedAnswer);

      const correctOption = Array.from(document.querySelectorAll('input[name="answer"]'))
          .find(option => option.value.trim().toUpperCase().startsWith(correctAnswer));

      if (correctOption) {
        correctOption.closest('li').classList.add('correct-answer');
      }

      if (selectedAnswer.startsWith(correctAnswer)) {
        feedback.innerHTML = "Correct!";
        feedback.classList.add('correct');
      } else {
        feedback.innerHTML = `Incorrect! The correct answer is: ${correctAnswer}`;
        feedback.classList.add('incorrect');

        const incorrectOption = selectedOption.closest('li');
        if (incorrectOption) {
          incorrectOption.classList.add('incorrect-answer');
        }
      }

      document.querySelectorAll('input[name="answer"]').forEach(option => option.disabled = true);
      nextButton.style.display = 'block';
    }

    function goToNextQuestion() {
      const currentIndex = questionUrls.findIndex(q => q.url === currentUrl);

      console.log("Current Index:", currentIndex);
      console.log("Current URL:", currentUrl);
      console.log("Question URLs:", questionUrls);

      if (currentIndex !== -1 && currentIndex < questionUrls.length - 1) {
        // Get the next URL directly from the array without modifications
        const nextUrl = questionUrls[currentIndex + 1].url;

        console.log("Navigating to:", nextUrl);
        window.location.href = `/${nextUrl}`;
      } else {
        alert("You've reached the end of the quiz!");
        window.location.href = "/";
      }
    }

  });
</script>
